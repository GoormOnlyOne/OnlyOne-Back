plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2025.0.0")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly  'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly  'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // Jwt
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.14.0'
    // Oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.4'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.4'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.4'
    // OpenFeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'io.github.openfeign:feign-jackson'
    //websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter'
    //fcm
    implementation 'com.google.firebase:firebase-admin:9.5.0'
    // S3
    implementation 'software.amazon.awssdk:s3:2.32.11'
    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // jpa 쿼리 확인
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    // notification 관련 테스트 임시 제외
    exclude '**/AppNotificationControllerTest.class'
    exclude '**/FcmServiceTest.class'
    exclude '**/SseEmittersServiceTest.class'
}

jacoco {
    toolVersion = "0.8.13"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        xml.outputLocation = layout.buildDirectory.file('jacoco/jacoco.xml')
    }
    
    // 제외할 패키지/클래스 설정
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                // 설정 클래스들
                '**/config/**',
                '**/configuration/**',
                
                // DTO/Entity/Enum 클래스들 (비즈니스 로직 없음)
                '**/dto/**',
                '**/entity/**',
                '**/domain/**/entity/**',
                
                // Application 시작 클래스
                '**/*Application*',
                
                // Exception 클래스들
                '**/exception/**',
                '**/global/exception/**',
                
                // 기타 유틸리티
                '**/util/**',
                '**/common/**',
            ])
        }))
    }
}

// 테스트 커버리지 최소 기준 설정
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.80  // 80% 커버리지 요구
            }
        }
        
        rule {
            enabled = true
            element = 'CLASS'
            includes = ['com.example.onlyone.domain.*.service.*']
            
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.75  // Service 클래스는 75% 이상
            }
        }
    }
}
